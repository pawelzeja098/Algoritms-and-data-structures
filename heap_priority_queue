class Elem:
    def __init__(self,priority,data) -> None:
        
        self.__data = data
        self.__priority = priority
    
    def __lt__(self,other):
        return self.__priority < other.__priority

    def __gt__(self,other):
        return self.__priority > other.__priority
    
    def __repr__(self) -> str:
        print(f"{self.__priority} : {self.__data}")

class Pqueue:
    def __init__(self) -> None:
        self.queue = []

    def is_empty(self):
        if not self.queue:
            return True
        return False

    def peek(self):
        pass

    def enqueue(self,key,data):
        new_elem = Elem(key,data)
        if self.is_empty() is True:
            self.queue.append(new_elem)
        
        last = self.queue[-1]
        if last < new_elem:
            self.queue.append(new_elem)
        
        heigth = len(self.queue)

        


    def dequeue(self):
        pass

    def left(self,idx):
        return idx * 2
        

    def right(self,idx):
        return idx * 2 + 1

    def parent(self,idx):
        return idx // 2

    def print_tab(self):
        print ('{', end=' ')
        print(*self.tab[:self.heap_size], sep=', ', end = ' ')
        print( '}')


    def print_tab(self):
        print ('{', end=' ')
        print(*self.tab[:self.heap_size], sep=', ', end = ' ')
        print( '}')

def main():
    priority_list = [7, 5, 1, 2, 5, 3, 4, 8, 9]
    values = list("GRYMOTYLA")


def test():
    l = []
    if not l:
        print("asdad")

test()